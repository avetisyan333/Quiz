{"ast":null,"code":"{/*************************************\r\n\r\n\r\n IN PROGRESS\r\n\r\n\r\n\r\n\r\n\r\n /*************************}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n // import React, {useEffect, useRef, useState} from \"react\";\r\n //\r\n //\r\n // const formatTime = (time) => {\r\n//     let minutes = Math.floor(time / 60)\r\n//     let seconds = Math.floor(time - minutes * 60)\r\n//\r\n//     if (minutes <= 10) minutes = +minutes\r\n//     if (seconds < 10) seconds = \"0\" + seconds\r\n//     return minutes + \":\" + seconds\r\n//\r\n// }\r\n //\r\n // export default function Timer({seconds, score, questions, setCount}) {\r\n//     const [countDown, setCountDown] = useState(seconds)\r\n//     const timeId = useRef()\r\n//     useEffect(() => {\r\n//         timeId.current = setInterval(() => {\r\n//             setCountDown(prev => prev - 1)\r\n//         }, 1000)\r\n//         return () => clearInterval(timeId.current)\r\n//     }, [])\r\n//     // useEffect(() => {\r\n//         if (countDown <= 0) {\r\n//             clearInterval(timeId.current)\r\n//             {\r\n//                 return(\r\n//                 <div className='score-section'>\r\n//                     You scored {score} out of {questions.length}\r\n//                     {/*<button onClick={handleRefreshPage}>Start Again</button>*/}//\n//                 </div>\n//                 )\n//             }\n//         }\n//     return (\n//         <h2>Timer > {formatTime(countDown)}</h2>\n//     )\n// }","map":{"version":3,"names":[],"sources":["C:/Users/harut/Desktop/qqq/quiz/src/Timer.jsx"],"sourcesContent":["{/*************************************\r\n\r\n\r\n IN PROGRESS\r\n\r\n\r\n\r\n\r\n\r\n /*************************}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n // import React, {useEffect, useRef, useState} from \"react\";\r\n //\r\n //\r\n // const formatTime = (time) => {\r\n//     let minutes = Math.floor(time / 60)\r\n//     let seconds = Math.floor(time - minutes * 60)\r\n//\r\n//     if (minutes <= 10) minutes = +minutes\r\n//     if (seconds < 10) seconds = \"0\" + seconds\r\n//     return minutes + \":\" + seconds\r\n//\r\n// }\r\n //\r\n // export default function Timer({seconds, score, questions, setCount}) {\r\n//     const [countDown, setCountDown] = useState(seconds)\r\n//     const timeId = useRef()\r\n//     useEffect(() => {\r\n//         timeId.current = setInterval(() => {\r\n//             setCountDown(prev => prev - 1)\r\n//         }, 1000)\r\n//         return () => clearInterval(timeId.current)\r\n//     }, [])\r\n//     // useEffect(() => {\r\n//         if (countDown <= 0) {\r\n//             clearInterval(timeId.current)\r\n//             {\r\n//                 return(\r\n//                 <div className='score-section'>\r\n//                     You scored {score} out of {questions.length}\r\n//                     {/*<button onClick={handleRefreshPage}>Start Again</button>*/\r\n}\r\n//\r\n//                 </div>\r\n//                 )\r\n//             }\r\n//         }\r\n//     return (\r\n//         <h2>Timer > {formatTime(countDown)}</h2>\r\n//     )\r\n// }"],"mappings":"AAAA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFACA,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}